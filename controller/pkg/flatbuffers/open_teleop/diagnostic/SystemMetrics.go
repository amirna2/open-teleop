// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package diagnostic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SystemMetrics struct {
	_tab flatbuffers.Table
}

func GetRootAsSystemMetrics(buf []byte, offset flatbuffers.UOffsetT) *SystemMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SystemMetrics{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSystemMetrics(buf []byte, offset flatbuffers.UOffsetT) *SystemMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SystemMetrics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SystemMetrics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SystemMetrics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SystemMetrics) SchemaVersion() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *SystemMetrics) MutateSchemaVersion(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SystemMetrics) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SystemMetrics) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *SystemMetrics) CpuUsage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SystemMetrics) MutateCpuUsage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *SystemMetrics) LoadAverage(obj *LoadAverage) *LoadAverage {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LoadAverage)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SystemMetrics) Memory(obj *Memory) *Memory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Memory)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SystemMetrics) Swap(obj *Swap) *Swap {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Swap)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SystemMetrics) DiskUsage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SystemMetrics) MutateDiskUsage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *SystemMetrics) RobotId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SystemMetrics) NodeStatus(obj *NodeStatus, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SystemMetrics) NodeStatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SystemMetricsStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func SystemMetricsAddSchemaVersion(builder *flatbuffers.Builder, schemaVersion int32) {
	builder.PrependInt32Slot(0, schemaVersion, 1)
}
func SystemMetricsAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(1, timestamp, 0)
}
func SystemMetricsAddCpuUsage(builder *flatbuffers.Builder, cpuUsage float32) {
	builder.PrependFloat32Slot(2, cpuUsage, 0.0)
}
func SystemMetricsAddLoadAverage(builder *flatbuffers.Builder, loadAverage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(loadAverage), 0)
}
func SystemMetricsAddMemory(builder *flatbuffers.Builder, memory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(memory), 0)
}
func SystemMetricsAddSwap(builder *flatbuffers.Builder, swap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(swap), 0)
}
func SystemMetricsAddDiskUsage(builder *flatbuffers.Builder, diskUsage float32) {
	builder.PrependFloat32Slot(6, diskUsage, 0.0)
}
func SystemMetricsAddRobotId(builder *flatbuffers.Builder, robotId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(robotId), 0)
}
func SystemMetricsAddNodeStatus(builder *flatbuffers.Builder, nodeStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(nodeStatus), 0)
}
func SystemMetricsStartNodeStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SystemMetricsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
