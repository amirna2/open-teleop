// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package diagnostic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Swap struct {
	_tab flatbuffers.Table
}

func GetRootAsSwap(buf []byte, offset flatbuffers.UOffsetT) *Swap {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Swap{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSwap(buf []byte, offset flatbuffers.UOffsetT) *Swap {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Swap{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Swap) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Swap) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Swap) TotalMb() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Swap) MutateTotalMb(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Swap) UsedMb() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Swap) MutateUsedMb(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *Swap) UsedPercent() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Swap) MutateUsedPercent(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func SwapStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SwapAddTotalMb(builder *flatbuffers.Builder, totalMb float32) {
	builder.PrependFloat32Slot(0, totalMb, 0.0)
}
func SwapAddUsedMb(builder *flatbuffers.Builder, usedMb float32) {
	builder.PrependFloat32Slot(1, usedMb, 0.0)
}
func SwapAddUsedPercent(builder *flatbuffers.Builder, usedPercent float32) {
	builder.PrependFloat32Slot(2, usedPercent, 0.0)
}
func SwapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
