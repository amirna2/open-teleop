// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package diagnostic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeStatus(buf []byte, offset flatbuffers.UOffsetT) *NodeStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeStatus{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNodeStatus(buf []byte, offset flatbuffers.UOffsetT) *NodeStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NodeStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeStatus) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NodeStatus) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NodeStatus) Pid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeStatus) MutatePid(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func NodeStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NodeStatusAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func NodeStatusAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(status), 0)
}
func NodeStatusAddPid(builder *flatbuffers.Builder, pid int32) {
	builder.PrependInt32Slot(2, pid, 0)
}
func NodeStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
