// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package diagnostic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoadAverage struct {
	_tab flatbuffers.Table
}

func GetRootAsLoadAverage(buf []byte, offset flatbuffers.UOffsetT) *LoadAverage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoadAverage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLoadAverage(buf []byte, offset flatbuffers.UOffsetT) *LoadAverage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LoadAverage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LoadAverage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoadAverage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoadAverage) OneMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LoadAverage) MutateOneMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *LoadAverage) FiveMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LoadAverage) MutateFiveMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *LoadAverage) FifteenMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LoadAverage) MutateFifteenMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func LoadAverageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LoadAverageAddOneMin(builder *flatbuffers.Builder, oneMin float32) {
	builder.PrependFloat32Slot(0, oneMin, 0.0)
}
func LoadAverageAddFiveMin(builder *flatbuffers.Builder, fiveMin float32) {
	builder.PrependFloat32Slot(1, fiveMin, 0.0)
}
func LoadAverageAddFifteenMin(builder *flatbuffers.Builder, fifteenMin float32) {
	builder.PrependFloat32Slot(2, fifteenMin, 0.0)
}
func LoadAverageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
