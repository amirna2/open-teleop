// ott_message.fbs
// Open-Teleop standardized message format for bridge-to-controller communication

namespace open_teleop.message;

enum ContentType : byte {
  ROS2_MESSAGE = 0,           // Standard ROS2 message (serialized in CDR)
  JSON_COMMAND = 1,           // Generic JSON command (e.g., Twist from UI)
  ENCODED_VIDEO_FRAME = 2     // Payload contains an encoded video frame
  // Other types can be added later as the platform evolves
}

enum FrameType : byte {
  FRAME_TYPE_UNKNOWN = 0,
  FRAME_TYPE_KEY = 1,         // Key frame (I-frame for video)
  FRAME_TYPE_DELTA = 2        // Delta frame (P/B-frame for video)
}

// Video frame metadata for ENCODED_VIDEO_FRAME content type
table VideoFrameMetadata {
  sequence_number:    uint64;     // Frame sequence number for ordering/loss detection
  original_timestamp_ns: int64;   // Original frame timestamp from ROS header (nanoseconds)
  frame_type:         FrameType;  // Key frame vs Delta frame
  encoding_format:    string;     // "video/h264", "video/vp8", etc.
  width:              uint32;     // Frame width in pixels
  height:             uint32;     // Frame height in pixels
  frame_id:           string;     // ROS header frame_id
}

table OttMessage {
  version:          uint8 = 1;  // Schema version, starting with 1
  
  // Core message content
  payload:          [ubyte];    // Raw message data
  content_type:     ContentType = ROS2_MESSAGE;
  
  // Single identifier from config
  ott:              string;   // Open-Teleop-Topic name (e.g., "teleop.sensor.battery_state")  
  timestamp_ns:     int64;    // When bridge received/processed the message (nanoseconds since epoch)
  
  // Optional metadata for specific content types
  video_metadata:   VideoFrameMetadata;  // Only populated for ENCODED_VIDEO_FRAME
}

root_type OttMessage; 