# automatically generated by the FlatBuffers compiler, do not modify

# namespace: diagnostic

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeStatus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeStatus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeStatus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeStatus
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeStatus
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeStatus
    def Pid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NodeStatusStart(builder): builder.StartObject(3)
def Start(builder):
    return NodeStatusStart(builder)
def NodeStatusAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return NodeStatusAddName(builder, name)
def NodeStatusAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def AddStatus(builder, status):
    return NodeStatusAddStatus(builder, status)
def NodeStatusAddPid(builder, pid): builder.PrependInt32Slot(2, pid, 0)
def AddPid(builder, pid):
    return NodeStatusAddPid(builder, pid)
def NodeStatusEnd(builder): return builder.EndObject()
def End(builder):
    return NodeStatusEnd(builder)