# automatically generated by the FlatBuffers compiler, do not modify

# namespace: diagnostic

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SystemMetrics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SystemMetrics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSystemMetrics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SystemMetrics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SystemMetrics
    def SchemaVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # SystemMetrics
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SystemMetrics
    def CpuUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SystemMetrics
    def LoadAverage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from open_teleop.diagnostic.LoadAverage import LoadAverage
            obj = LoadAverage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SystemMetrics
    def Memory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from open_teleop.diagnostic.Memory import Memory
            obj = Memory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SystemMetrics
    def Swap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from open_teleop.diagnostic.Swap import Swap
            obj = Swap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SystemMetrics
    def DiskUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SystemMetrics
    def RobotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SystemMetrics
    def NodeStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from open_teleop.diagnostic.NodeStatus import NodeStatus
            obj = NodeStatus()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SystemMetrics
    def NodeStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SystemMetrics
    def NodeStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def SystemMetricsStart(builder): builder.StartObject(9)
def Start(builder):
    return SystemMetricsStart(builder)
def SystemMetricsAddSchemaVersion(builder, schemaVersion): builder.PrependInt32Slot(0, schemaVersion, 1)
def AddSchemaVersion(builder, schemaVersion):
    return SystemMetricsAddSchemaVersion(builder, schemaVersion)
def SystemMetricsAddTimestamp(builder, timestamp): builder.PrependInt64Slot(1, timestamp, 0)
def AddTimestamp(builder, timestamp):
    return SystemMetricsAddTimestamp(builder, timestamp)
def SystemMetricsAddCpuUsage(builder, cpuUsage): builder.PrependFloat32Slot(2, cpuUsage, 0.0)
def AddCpuUsage(builder, cpuUsage):
    return SystemMetricsAddCpuUsage(builder, cpuUsage)
def SystemMetricsAddLoadAverage(builder, loadAverage): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(loadAverage), 0)
def AddLoadAverage(builder, loadAverage):
    return SystemMetricsAddLoadAverage(builder, loadAverage)
def SystemMetricsAddMemory(builder, memory): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(memory), 0)
def AddMemory(builder, memory):
    return SystemMetricsAddMemory(builder, memory)
def SystemMetricsAddSwap(builder, swap): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(swap), 0)
def AddSwap(builder, swap):
    return SystemMetricsAddSwap(builder, swap)
def SystemMetricsAddDiskUsage(builder, diskUsage): builder.PrependFloat32Slot(6, diskUsage, 0.0)
def AddDiskUsage(builder, diskUsage):
    return SystemMetricsAddDiskUsage(builder, diskUsage)
def SystemMetricsAddRobotId(builder, robotId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(robotId), 0)
def AddRobotId(builder, robotId):
    return SystemMetricsAddRobotId(builder, robotId)
def SystemMetricsAddNodeStatus(builder, nodeStatus): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nodeStatus), 0)
def AddNodeStatus(builder, nodeStatus):
    return SystemMetricsAddNodeStatus(builder, nodeStatus)
def SystemMetricsStartNodeStatusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNodeStatusVector(builder, numElems):
    return SystemMetricsStartNodeStatusVector(builder, numElems)
def SystemMetricsEnd(builder): return builder.EndObject()
def End(builder):
    return SystemMetricsEnd(builder)