# automatically generated by the FlatBuffers compiler, do not modify

# namespace: diagnostic

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Swap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Swap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSwap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Swap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Swap
    def TotalMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Swap
    def UsedMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Swap
    def UsedPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SwapStart(builder): builder.StartObject(3)
def Start(builder):
    return SwapStart(builder)
def SwapAddTotalMb(builder, totalMb): builder.PrependFloat32Slot(0, totalMb, 0.0)
def AddTotalMb(builder, totalMb):
    return SwapAddTotalMb(builder, totalMb)
def SwapAddUsedMb(builder, usedMb): builder.PrependFloat32Slot(1, usedMb, 0.0)
def AddUsedMb(builder, usedMb):
    return SwapAddUsedMb(builder, usedMb)
def SwapAddUsedPercent(builder, usedPercent): builder.PrependFloat32Slot(2, usedPercent, 0.0)
def AddUsedPercent(builder, usedPercent):
    return SwapAddUsedPercent(builder, usedPercent)
def SwapEnd(builder): return builder.EndObject()
def End(builder):
    return SwapEnd(builder)