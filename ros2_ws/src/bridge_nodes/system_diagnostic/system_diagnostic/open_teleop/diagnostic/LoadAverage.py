# automatically generated by the FlatBuffers compiler, do not modify

# namespace: diagnostic

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LoadAverage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoadAverage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLoadAverage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LoadAverage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoadAverage
    def OneMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LoadAverage
    def FiveMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LoadAverage
    def FifteenMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def LoadAverageStart(builder): builder.StartObject(3)
def Start(builder):
    return LoadAverageStart(builder)
def LoadAverageAddOneMin(builder, oneMin): builder.PrependFloat32Slot(0, oneMin, 0.0)
def AddOneMin(builder, oneMin):
    return LoadAverageAddOneMin(builder, oneMin)
def LoadAverageAddFiveMin(builder, fiveMin): builder.PrependFloat32Slot(1, fiveMin, 0.0)
def AddFiveMin(builder, fiveMin):
    return LoadAverageAddFiveMin(builder, fiveMin)
def LoadAverageAddFifteenMin(builder, fifteenMin): builder.PrependFloat32Slot(2, fifteenMin, 0.0)
def AddFifteenMin(builder, fifteenMin):
    return LoadAverageAddFifteenMin(builder, fifteenMin)
def LoadAverageEnd(builder): return builder.EndObject()
def End(builder):
    return LoadAverageEnd(builder)