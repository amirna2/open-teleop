# automatically generated by the FlatBuffers compiler, do not modify

# namespace: diagnostic

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Memory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Memory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Memory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Memory
    def TotalMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Memory
    def UsedMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Memory
    def AvailableMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Memory
    def UsedPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Memory
    def AvailablePercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def MemoryStart(builder): builder.StartObject(5)
def Start(builder):
    return MemoryStart(builder)
def MemoryAddTotalMb(builder, totalMb): builder.PrependFloat32Slot(0, totalMb, 0.0)
def AddTotalMb(builder, totalMb):
    return MemoryAddTotalMb(builder, totalMb)
def MemoryAddUsedMb(builder, usedMb): builder.PrependFloat32Slot(1, usedMb, 0.0)
def AddUsedMb(builder, usedMb):
    return MemoryAddUsedMb(builder, usedMb)
def MemoryAddAvailableMb(builder, availableMb): builder.PrependFloat32Slot(2, availableMb, 0.0)
def AddAvailableMb(builder, availableMb):
    return MemoryAddAvailableMb(builder, availableMb)
def MemoryAddUsedPercent(builder, usedPercent): builder.PrependFloat32Slot(3, usedPercent, 0.0)
def AddUsedPercent(builder, usedPercent):
    return MemoryAddUsedPercent(builder, usedPercent)
def MemoryAddAvailablePercent(builder, availablePercent): builder.PrependFloat32Slot(4, availablePercent, 0.0)
def AddAvailablePercent(builder, availablePercent):
    return MemoryAddAvailablePercent(builder, availablePercent)
def MemoryEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryEnd(builder)