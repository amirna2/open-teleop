#!/bin/bash
# Script to generate code from FlatBuffers schemas

set -e  # Exit on error

# Path configuration
SCHEMAS_DIR="$(dirname "$(dirname "$0")")/schemas"
ROS2_OUTPUT_DIR="$(dirname "$(dirname "$0")")/ros2_ws/src/bridge_nodes"
GO_OUTPUT_DIR="$(dirname "$(dirname "$0")")/controller/pkg/flatbuffers"
ROS_GATEWAY_DIR="$(dirname "$(dirname "$0")")/ros2_ws/src/ros_gateway"
JS_OUTPUT_DIR="$(dirname "$(dirname "$0")")/controller/web/static/js/flatbuffers"

# Check FlatBuffers compiler
if ! command -v flatc &> /dev/null; then
    echo "Error: FlatBuffers compiler (flatc) not found."
    echo "Please install it with: sudo apt-get install flatbuffers-compiler"
    exit 1
fi

# --- BEGIN REVISED CLEANUP ---
echo "Cleaning previous generated FlatBuffers code..."

# Go controller output
if [ -d "$GO_OUTPUT_DIR" ]; then
    echo "Removing Go output: $GO_OUTPUT_DIR"
    rm -rf "$GO_OUTPUT_DIR"
fi

# ROS Gateway Python output
if [ -d "$ROS_GATEWAY_DIR" ]; then
    GATEWAY_FLATBUFFERS_DIR="$ROS_GATEWAY_DIR/ros_gateway/flatbuffers"
    if [ -d "$GATEWAY_FLATBUFFERS_DIR" ]; then
        echo "Removing Gateway Python output: $GATEWAY_FLATBUFFERS_DIR"
        rm -rf "$GATEWAY_FLATBUFFERS_DIR"
    fi
fi

# Bridge packages Python output (OTT Schema only)
if [ -d "$ROS2_OUTPUT_DIR" ]; then
    for pkg_dir in "$ROS2_OUTPUT_DIR"/*; do
        if [ -d "$pkg_dir" ]; then
            pkg_name=$(basename "$pkg_dir")
            if [[ "$pkg_name" == *bridge* ]]; then
                 module_dir="$pkg_dir/$pkg_name"
                 BRIDGE_FLATBUFFERS_DIR="$module_dir/flatbuffers"
                 if [ -d "$BRIDGE_FLATBUFFERS_DIR" ]; then
                     echo "Removing Bridge Python output: $BRIDGE_FLATBUFFERS_DIR"
                     rm -rf "$BRIDGE_FLATBUFFERS_DIR"
                 fi
            fi
        fi
    done
fi

echo "Cleanup attempt finished."
# --- END REVISED CLEANUP ---

# Ensure output directories exist
mkdir -p "$GO_OUTPUT_DIR"
mkdir -p "$JS_OUTPUT_DIR"

# First, process the OTT message schema which is common to all bridges
OTT_SCHEMA="$SCHEMAS_DIR/ott_message.fbs"
if [ -f "$OTT_SCHEMA" ]; then
    echo "Processing common schema: ott_message.fbs"
    
    # Generate Go code for controller
    echo "Generating Go code for OTT message..."
    mkdir -p "$GO_OUTPUT_DIR" 
    flatc --go -o "$GO_OUTPUT_DIR" "$OTT_SCHEMA"
    
    # Generate JavaScript code for web UI
    echo "Generating JavaScript code for web UI..."
    flatc --ts -o "$JS_OUTPUT_DIR" "$OTT_SCHEMA"
    
    # Generate Python code for ROS gateway
    if [ -d "$ROS_GATEWAY_DIR" ]; then
        echo "Generating Python code for ros_gateway..."
        GATEWAY_MODULE_DIR="$ROS_GATEWAY_DIR/ros_gateway"
        if [ -d "$GATEWAY_MODULE_DIR" ]; then
            GATEWAY_FLATBUFFERS_DIR="$GATEWAY_MODULE_DIR/flatbuffers"
            mkdir -p "$GATEWAY_FLATBUFFERS_DIR"
            flatc --python -o "$GATEWAY_FLATBUFFERS_DIR" "$OTT_SCHEMA"
            
            # --- BEGIN SIMPLIFIED __init__.py CREATION (Restored Known Good Version) ---
            FLATC_OUTPUT_DIR="$GATEWAY_FLATBUFFERS_DIR"
            # --- Add top-level __init__.py --- 
            touch "$FLATC_OUTPUT_DIR/__init__.py"
            
            NS_PKG_DIR="$FLATC_OUTPUT_DIR/open_teleop/message"

            # Check if the target dir exists *before* trying to write into it
            if [ ! -d "$NS_PKG_DIR" ]; then
                 echo "Warning: Expected FlatBuffers output directory not found at $NS_PKG_DIR after flatc run."
            else
                # Create namespace __init__.py
                touch "$FLATC_OUTPUT_DIR/open_teleop/__init__.py"
                
                # Create and populate package __init__.py
                INIT_PY_PATH="$NS_PKG_DIR/__init__.py"
                echo "# Auto-generated by generate_interfaces.sh" > "$INIT_PY_PATH"
                echo "" >> "$INIT_PY_PATH"
                # Import Enum
                echo "from .ContentType import ContentType" >> "$INIT_PY_PATH"
                # Import Reader Class
                echo "from .OttMessage import OttMessage" >> "$INIT_PY_PATH"
                # REMOVE Builder Function imports from __init__.py
            fi
            # --- END SIMPLIFIED __init__.py CREATION ---

            # echo "Generated FlatBuffer code for ros_gateway" # Can be removed, implied by preceding echo
        else
            echo "Warning: ros_gateway module directory not found at $GATEWAY_MODULE_DIR"
        fi
    else
        echo "Warning: ros_gateway package directory not found, skipping"
    fi
    
    # Generate Python code for bridge packages only
    echo "Generating Python code for bridge packages..."
    for pkg_dir in "$ROS2_OUTPUT_DIR"/*; do
        if [ -d "$pkg_dir" ]; then
            pkg_name=$(basename "$pkg_dir")
            
            if [[ "$pkg_name" == *bridge* ]]; then
                module_dir="$pkg_dir/$pkg_name"
                if [ -d "$module_dir" ]; then
                    BRIDGE_FLATBUFFERS_DIR="$module_dir/flatbuffers"
                    mkdir -p "$BRIDGE_FLATBUFFERS_DIR"
                    echo "Generating Python code for $pkg_name... (OTT Schema)"
                    flatc --python -o "$BRIDGE_FLATBUFFERS_DIR" "$OTT_SCHEMA"
                    # TODO: Add __init__.py generation logic here too if needed for bridges
                else
                    echo "Warning: Python module directory not found in $pkg_dir"
                fi
            fi
        fi
    done
fi

# Process remaining schema files (if any)
for schema in "$SCHEMAS_DIR"/*.fbs; do
    if [ -f "$schema" ] && [ "$(basename "$schema")" != "ott_message.fbs" ]; then
        schema_name=$(basename "$schema")
        echo "Processing schema: $schema_name"
        
        package_name=""
        case "$schema_name" in
            teleop.fbs)
                package_name="teleop_command_bridge"
                ;;
            *)
                echo "Warning: No package mapping for $schema_name, skipping ROS2 code generation"
                ;;
        esac
        
        echo "Generating Go code for $schema_name..."
        flatc --go -o "$GO_OUTPUT_DIR" "$schema"
        
        if [ -n "$package_name" ]; then
            ros2_pkg_dir="$ROS2_OUTPUT_DIR/$package_name/$package_name"
            if [ -d "$ros2_pkg_dir" ]; then
                echo "Generating Python code for $package_name ($schema_name)..."
                mkdir -p "$ros2_pkg_dir"
                flatc --python -o "$ros2_pkg_dir" "$schema"
                # TODO: Add __init__.py generation for these schemas too if needed
            else
                echo "Warning: ROS2 package directory not found: $ros2_pkg_dir"
            fi
        fi
    fi
done

echo "Code generation complete!" 